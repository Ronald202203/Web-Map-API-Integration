@{
    ViewData["Title"] = "Home Page";
}

<h2 style="background-color: yellow; color: blue; text-align: center; font-style: oblique">
    My first Google Map API integration project with ASP.NET Core
</h2>

<h5 style="text-align: center;">Click to create a marker at the clicked point and get its latitude/longitude !</h5>

<div id="map" style="height:600px;width:100%"></div>

<button onclick="removeMarkers()">Delete Markers</button>

@section Scripts {
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBMYzsd2xLdFTICmUyjE71zrjW89Y5EOSU"></script>

    <script>
        let map;
        let markers = [];

        function initMap() {
            map = new google.maps.Map(document.getElementById("map"), {
                center: { lat: 4.6125522, lng: 13.1535811 },
                zoom: 8,
                scrollwheel: true,
                draggable: true,
                mapTypeId: google.maps.MapTypeId.ROADMAP
            });

            // Ajoute le gestionnaire d'événements "click" au marqueur, de sorte que
            // si on clique directement sur un marqueur existant, les coordonnées
            // seront également affichées dans la fenêtre d'info.

            map.addListener("click", (event) => {
                addMarker(event.latLng);
            });
        }

        function addMarker(latLng) {
            const marker = new google.maps.Marker({
                position: latLng,
                map: map,
                title: "Marker " + (markers.length + 1).toString()
            });

            markers.push(marker);

            showMarkerCoordinates(marker.getPosition());
        }

        // Dans la fonction addMarker(), on passe marker.getPosition()
        // à la fonction showMarkerCoordinates() pour obtenir la position du marqueur.

        function showMarkerCoordinates(latLng) {
            const infoWindow = new google.maps.InfoWindow({
                content: "Latitude: " + latLng.lat() + "<br>Longitude: " + latLng.lng()
            });

            infoWindow.open(map, markers[markers.length - 1]);
        }

        // Dans la fonction showMarkerCoordinates(), nous utilisons 
        // markers[markers.length - 1] pour récupérer le dernier marqueur 
        // ajouté dans le tableau markers.Cela permet d'afficher la fenêtre d'info 
        // associée au marqueur correct.

        function removeMarkers() {
            markers.forEach(marker => {
                marker.setMap(null);
            });

            markers = [];
        }

        // utilisé pour appeler la fonction initMap() une fois que la page HTML
        //  et tous ses éléments ont été complètement chargés.
        google.maps.event.addDomListener(window, 'load', initMap);
    </script>
}

<footer>
    <p style="background-color: yellow; font-weight: bold; color: blue; text-align: center; font-style: oblique">
        &copy; @DateTime.Now.ToLocalTime()
    </p>
</footer>